- - - - - - - - - - - - -
Assignment `lang2`

Due by 3pm on 30 January
- - - - - - - - - - - - -


This assignment extends your `lang1` interpreter in two phases
described below. Each phase should be checked in as a separate
file into your github.iu.edu repository.

1. (40%) Create a file `lang2a.rkt` that is your `lang1` interpreter but
   extended to include Nat values and eliminators (note that we are
   still in an untyped calculus). In other words you will need to add
   support to your interpreter for the following forms:
     + zero
     + add1
     + which-Nat
     + iter-Nat
     + rec-Nat

  Write enough tests so that you (and the graders) are confident
  your implementation of Nats works correctly.
  (NOTE: the values for Nats are _much_ nicer than the values for
   closures, so these tests should be much easier to write and
   smaller than some of the gargantuan tests we gave you in
   `lang1` for closures)

   

2. (60%) Create a file `lang2b.rkt` that is your `lang2a` interpreter
   but with NbE added using the techniques we discussed in
   class.

   Write enough tests so that you (and the graders) are
   confident you have implemented NbE correctly.


Bonus 1 (i.e. not for credit)

Add support for lambdas of more than 1 argument



Bonus 2 (i.e. not for credit)

Add binary search trees (BSTs) to your interpreter with NbE,

where BST ::= leaf | (node BST Nat BST)

Don't forget to include all appropriate values, eliminators, neutral
terms, etc.

