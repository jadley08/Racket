#lang racket

(require (for-syntax syntax/parse racket/syntax)
         syntax/parse
         racket/syntax)

;(provide (all-from-out racket))
(provide intersection ∩
         union ∪
         #%app
         ^
         #%datum
         #%top
         #%top-interaction
         quote
         #%module-begin
         list
         cons
         require)

(define ^ '^)

(define-syntax (#%app stx)
  (syntax-parse stx #:literals (^)
    [(_ (a ^ b) ...)
     #'(list (cons a b) ...)]
    [(_ e args ...) #'(#%plain-app e args ...)]))

(define ∩
  (λ (fact1 fact2)
    (intersection fact1 fact2)))
(define intersection
  (λ (fact1 fact2)
    (letrec ([helper
              (λ (fact1 fact2 res)
                (cond
                  [(null? fact1) res]
                  [else (let* ([fact1-a (car (car fact1))]
                               [fact1-d (cdr (car fact1))]
                               [v (contains-v fact2 fact1-a)]
                               [min-v (min fact1-d v)])
                          (if (eqv? min-v 0)
                              (helper (cdr fact1) fact2 res)
                              (helper (cdr fact1) fact2 (append res (list (cons fact1-a min-v))))))]))])
      (helper fact1 fact2 '()))))

(define contains-v
  (λ (fact num)
    (cond
      [(null? fact) 0]
      [else (if (eqv? num (car (car fact)))
                (cdr (car fact))
                (contains-v (cdr fact) num))])))

(define ∪
  (λ (fact1 fact2)
    (union fact1 fact2)))
(define union
  (λ (fact1 fact2)
    (letrec ([helper
              (λ (fact1 fact2 res)
                (cond
                  [(null? fact1) (append res fact2)]
                  [(< (car (car fact2)) (car (car fact1)))
                   (helper fact2 fact1 res)]
                  [(eqv? (car (car fact1)) (car (car fact2)))
                   (helper (cdr fact1) (cdr fact2) (append res (list (cons (car (car fact1))
                                                                           (max (cdr (car fact1))
                                                                                (cdr (car fact2)))))))]
                  [else (helper (cdr fact1) fact2 (append res (list (car fact1))))]))])
      (helper fact1 fact2 '()))))